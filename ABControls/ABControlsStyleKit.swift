//
//  ABControlsStyleKit.swift
//  ABControls
//
//  Created by Al Corbett on 8/5/18.
//  Copyright Â© 2018 AlbeBaubles LLC. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class ABControlsStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfDownArrow: UIImage?
        static var downArrowTargets: [AnyObject]?
        static var imageOfCheckedBox: UIImage?
        static var checkedBoxTargets: [AnyObject]?
        static var imageOfUncheckedBox: UIImage?
        static var uncheckedBoxTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawDownArrow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let color = UIColor(red: 0.091, green: 0.094, blue: 0.090, alpha: 1.000)

        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 15, y: 14)
        context.rotate(by: -180 * CGFloat.pi/180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 0, y: -9))
        polygonPath.addLine(to: CGPoint(x: 9.09, y: 4.5))
        polygonPath.addLine(to: CGPoint(x: -9.09, y: 4.5))
        polygonPath.close()
        color.setFill()
        polygonPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCheckedBox(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let color = UIColor(red: 0.091, green: 0.094, blue: 0.090, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 3.5, y: 3.5, width: 23, height: 23), cornerRadius: 9.75)
        color.setFill()
        rectanglePath.fill()
        color.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawUncheckedBox(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let color = UIColor(red: 0.091, green: 0.094, blue: 0.090, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 3.5, y: 3.5, width: 23, height: 23), cornerRadius: 9.75)
        color.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfDownArrow: UIImage {
        if Cache.imageOfDownArrow != nil {
            return Cache.imageOfDownArrow!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            ABControlsStyleKit.drawDownArrow()

        Cache.imageOfDownArrow = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDownArrow!
    }

    @objc dynamic public class var imageOfCheckedBox: UIImage {
        if Cache.imageOfCheckedBox != nil {
            return Cache.imageOfCheckedBox!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            ABControlsStyleKit.drawCheckedBox()

        Cache.imageOfCheckedBox = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCheckedBox!
    }

    @objc dynamic public class var imageOfUncheckedBox: UIImage {
        if Cache.imageOfUncheckedBox != nil {
            return Cache.imageOfUncheckedBox!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            ABControlsStyleKit.drawUncheckedBox()

        Cache.imageOfUncheckedBox = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfUncheckedBox!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var downArrowTargets: [AnyObject]! {
        get { return Cache.downArrowTargets }
        set {
            Cache.downArrowTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: ABControlsStyleKit.imageOfDownArrow)
            }
        }
    }

    @objc @IBOutlet dynamic var checkedBoxTargets: [AnyObject]! {
        get { return Cache.checkedBoxTargets }
        set {
            Cache.checkedBoxTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: ABControlsStyleKit.imageOfCheckedBox)
            }
        }
    }

    @objc @IBOutlet dynamic var uncheckedBoxTargets: [AnyObject]! {
        get { return Cache.uncheckedBoxTargets }
        set {
            Cache.uncheckedBoxTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: ABControlsStyleKit.imageOfUncheckedBox)
            }
        }
    }




    @objc(ABControlsStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
